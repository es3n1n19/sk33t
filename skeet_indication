
_DEBUG = true
local clipboard = require("neverlose/clipboard")
local vmt_hook = require("neverlose/vmt_hook")
local gradient = require("neverlose/gradient")
local easing = require("neverlose/easing")
local base64 = require("neverlose/base64")
local 
    menu,
    skeet_indication
ffi.cdef[[
    void* __stdcall URLDownloadToFileA(void* LPUNKNOWN, const char* LPCSTR, const char* LPCSTR2, int a, int LPBINDSTATUSCALLBACK);  
    bool DeleteUrlCacheEntryA(const char* lpszUrlName);
]]

local safecall = function(name, report, f)
    return function(...)
        local s, ret = pcall(f, ...)

        if not s then
            local retmessage = name .. " : " .. ret:gsub(".{6}", "")

            if report then
                client.log_error(retmessage)
            end

            return false, retmessage
        else
            return ret, s
        end
    end
end

menu = {
    __index = function(self, index, args)
        return (function(group, ...)


            local item_group
            if group.__name ~= "sol.Lua::LuaGroup" then
                local group_hash = string.format("%s%s", group[2] == nil and "unk" or group[2], group[1])
                item_group = ui_handler.groups[group_hash]
                if item_group == nil then
                    if group[3] ~= nil then
                        ui_handler.groups[group_hash] = ui.create(group[1], group[2], group[3])
                    elseif group[2] ~= nil then
                        ui_handler.groups[group_hash] = ui.create(group[1], group[2])
                    else
                        ui_handler.groups[group_hash] = ui.create(group[1])
                    end
                    item_group = ui_handler.groups[group_hash]
                end
            else
                item_group = group
            end

            local item = item_group[index](item_group, ...)
            return (function(tab, uniq_name, in_config, fn)
                ui_handler.new_element(tab, uniq_name, in_config, item, fn)
                return function(afn)

                    if afn ~= nil then
                        afn(item:create())
                    end

                    return item
                end
            end)
        end)
    end
}

ui.find("Visuals", "World", "Main", "Force Thirdperson")
ui.find("Aimbot", "Ragebot", "Main", "Enabled", "Dormant Aimbot")
ui.find("Aimbot", "Ragebot", "Selection", "Hitboxes")
ui.find("Aimbot", "Ragebot", "Selection", "Multipoint")
ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Inverter")

ui.find("Aimbot", "Anti Aim", "Misc", "Slow Walk")
ui.find("Aimbot", "Anti Aim", "Misc", "Fake Duck")

ui.find("Aimbot", "Anti Aim", "Angles", "Pitch")

ui.find("Aimbot", "Anti Aim", "Angles", "Yaw")
ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Base")
ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Offset")
ui.find("Aimbot", "Anti Aim", "Angles", "Yaw", "Avoid Backstab")
ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier")
ui.find("Aimbot", "Anti Aim", "Angles", "Yaw Modifier", "Offset")

ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw")
ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Left Limit")
ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Right Limit")
ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Options")
ui.find("Aimbot", "Anti Aim", "Angles", "Body Yaw", "Freestanding")

ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding")
ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding", "Disable Yaw Modifiers")
ui.find("Aimbot", "Anti Aim", "Angles", "Freestanding", "Body Freestanding")

ui.find("Aimbot", "Anti Aim", "Angles", "Extended Angles")
ui.find("Aimbot", "Anti Aim", "Angles", "Extended Angles", "Extended Pitch")
ui.find("Aimbot", "Anti Aim", "Angles", "Extended Angles", "Extended Roll")

ui.find("Aimbot", "Anti Aim", "Fake Lag", "Enabled")
ui.find("Aimbot", "Anti Aim", "Fake Lag", "Limit")
ui.find("Aimbot", "Anti Aim", "Fake Lag", "Variability")

ui.find("Aimbot", "Ragebot", "Selection", "Hit Chance")

ui.find("Aimbot", "Ragebot", "Main", "Double Tap")
ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Lag Options")
ui.find("Aimbot", "Ragebot", "Main", "Double Tap", "Fake Lag Limit")

ui.find("Aimbot", "Ragebot", "Selection", "Min. Damage")
ui.find("Aimbot", "Ragebot", "Safety", "Body Aim")
ui.find("Aimbot", "Ragebot", "Safety", "Safe Points")

ui.find("Aimbot", "Ragebot", "Main", "Peek Assist")

ui.find("Aimbot", "Ragebot", "Main", "Hide Shots")
ui.find("Aimbot", "Ragebot", "Main", "Hide Shots", "Options")

ui.find("Visuals", "World", "Main", "Override Zoom", "Scope Overlay")

ui.find("Miscellaneous", "Main", "Other", "Fake Latency")
ui.find("Aimbot", "Anti Aim", "Misc", "Leg Movement")

local c4_info = {
    planting = false,
    on_plant_time = 0,
    fill = 0,
    planting_site = ""
}

skeet_indication.handle = function()
    if not ui_handler.elements["interface"]["skeet_indication"] then
        return
    end

    local player = entity.get_local_player()

    if player == nil then
        return
    end

    local c4 = entity.get_entities("CPlantedC4", true)[1]
    local bombsite = ""
    local timer = 0
    local defused = false
    local damage = 0
    local dmg = 0
    local willKill = false
    if c4 ~= nil then
        timer = (c4.m_flC4Blow - globals.curtime)
        defused = c4.m_bBombDefused
        if timer > 0 and not defused then
            local defusestart = c4.m_hBombDefuser ~= 4294967295
            local defuselength = c4.m_flDefuseLength
            local defusetimer = defusestart and (c4.m_flDefuseCountDown - globals.curtime) or -1
            if defusetimer > 0 then
                local clr = timer > defusetimer and color(58, 191, 54, 160) or color(252, 18, 19, 125)
                
                local barlength = (((defines.screen_size.y - 50) / defuselength) * (defusetimer))
                render.rect(vector(0.0, 0.0), vector(16, defines.screen_size.y), color(25, 25, 25, 160))
                render.rect_outline(vector(0.0, 0.0), vector(16, defines.screen_size.y), color(25, 25, 25, 160))
                
                render.rect(vector(0, defines.screen_size.y - barlength), vector(16, defines.screen_size.y), clr)
            end
            
            bombsite = c4.m_nBombSite == 0 and "A" or "B"
            local health = player.m_iHealth
            local armor = player.m_ArmorValue
            local eLoc = c4.m_vecOrigin
            local lLoc = player.m_vecOrigin
            local distance = eLoc:dist(lLoc)
            local a = 450.7
            local b = 75.68
            local c = 789.2
            local d = (distance - b) / c;

            damage = a * math.exp(-d * d)
            
            if armor > 0 then
                local newDmg = damage * 0.5;

                local armorDmg = (damage - newDmg) * 0.5
                if armorDmg > armor then
                    armor = armor * (1 / .5)
                    newDmg = damage - armorDmg
                end
                damage = newDmg;
            end

            dmg = math.ceil(damage)

            if dmg >= health then
                willKill = true
            else 
                willKill = false
            end
        end
    end
    if c4_info.planting then
        c4_info.fill = 3.125 - (3.125 + c4_info.on_plant_time - globals.curtime)
        if(c4_info.fill > 3.125) then
            c4_info.fill = 3.125
        end
    end

    local skeet_indication_style = ui_handler.elements["interface"]["skeet_indication_style"]

    local adjust_adding = skeet_indication_style == "Old" and -20 or 37
    local add_y = skeet_indication_style == "Old" and -40 or 0

    local ping = player:get_resource().m_iPing
    local delta = (math.abs(ping % 360)) / (neverlose_refs.fake_latency:get() / 2)
    if delta > 1 then delta = 1 end

    local ping_color = color(255 - (125 * delta), 200 * delta, 0)

    local binds = {
        {"HITCHANCE OVR", defines.get_bind("Hit Chance")[1], color(255, 200)},
        {"HITBOX OVR", defines.get_bind("Hitboxes")[1], color(255, 200)},
        {"DA", neverlose_refs.dormant:get(), color(255, 200)},
        {"PING", neverlose_refs.fake_latency:get() > 0 and player:is_alive(), ping_color},
        {"DUCK", neverlose_refs.fake_duck:get(), color(255, 200)},
        {"BODY", neverlose_refs.prefer_body:get() == "Force", color(255, 200)},
        {"SAFE", neverlose_refs.prefer_safety:get() == "Force", color(255, 200)},
        {"MD", defines.get_bind("Min. Damage")[1], color(255, 200)},
        {"FS", ui_handler.elements["aa"]["manuals"] == "Freestanding", color(255, 200)},
        {bombsite.." - " .. string.format("%.1f", timer) .. "s", timer > 0 and not defused, color(255, 200)},
        {"FATAL", player:is_alive() and willKill, color(255, 0, 0, 255)},
        {"-" .. dmg .. " HP", player:is_alive() and not willKill and damage > 0.5, color(210, 216, 112, 255)},
        {c4_info.planting_site, c4_info.planting, color(210, 216, 112, 255), color(255, 255), skeet_indication_style == "New" and c4_info.fill/3.3 or nil},
        {"DT", neverlose_refs.doubletap:get(), rage.exploit:get() == 1 and color(255, 200) or color(255, 0, 0, 255)}
    }

    for k, v in pairs(binds) do
        if v[2] then
            render.indicator(v[1], add_y, v[3], v[4], v[5])
            add_y = add_y - adjust_adding
        end
    end
end

c4_info.reset = function()
    c4_info.planting = false
	c4_info.fill = 0
	c4_info.on_plant_time = 0
	c4_info.planting_site = ""
end

c4_info.bomb_beginplant = function(e)
    local player_resource = entity.get_player_resource()

    if player_resource == nil then
        return
    end

    c4_info.on_plant_time = globals.curtime
    c4_info.planting = true

    local m_bombsiteCenterA = player_resource.m_bombsiteCenterA
    local m_bombsiteCenterB = player_resource.m_bombsiteCenterB
    
    local userid = entity.get(e.userid, true)
    local userid_origin = userid:get_origin()
    local dist_to_a = userid_origin:dist(m_bombsiteCenterA)
    local dist_to_b = userid_origin:dist(m_bombsiteCenterB)
    
    c4_info.planting_site = dist_to_a < dist_to_b and "Bombsite A" or "Bombsite B"
end

menu.switch(ui_handler.tab.interface.interface, "Skeet Indication")("interface", "skeet_indication")(function(group)

    menu.combo(group, "Style", {"Old", "New"})("interface", "skeet_indication_style", true, function()
        return ui_handler.elements["interface"]["skeet_indication"]
    end)

    menu.switch(group, "Spectators")("interface", "skeet_indication_spectators", true, function()
        return ui_handler.elements["interface"]["skeet_indication"]
    end)

end)


drag.menu = {}
drag.items = {"branded_watermark", "keybinds", "spectators"}
for k, v in pairs(drag.items) do
    drag.menu[v] = 
    {
        pos_x = menu.slider(ui_handler.tab.interface.interface, v.."_pos_x", 0, defines.screen_size.x, math.floor(0.1 * defines.screen_size.x))("drag", v.."_pos_x", true, function()
            return false
        end),
        pos_y = menu.slider(ui_handler.tab.interface.interface, v.."_pos_y", 0, defines.screen_size.y, math.floor(0.1 * k * defines.screen_size.y))("drag", v.."_pos_y", true, function()
            return false
        end),
    }
end

drag.adjust = function()
    for k, item in pairs(drag.items) do
        ui_handler.refs["drag"][item .. "_pos_x"].ref:set(ui_handler.elements["drag"][item .. "_pos_x"] * defines.dpi_scale.x)
        ui_handler.refs["drag"][item .. "_pos_y"].ref:set(ui_handler.elements["drag"][item .. "_pos_y"] * defines.dpi_scale.y)
    end
end

drag.in_bounds = function(vec1, vec2)
    local mouse_pos = ui.get_mouse_position()
    return mouse_pos.x >= vec1.x and mouse_pos.x <= vec2.x and mouse_pos.y >= vec1.y and mouse_pos.y <= vec2.y 
end

drag.item = {}
drag.current_drugging_item = nil
drag.hovered_something = false
drag.handle = function(x, y, w, h, item, alpha)
    alpha = alpha or 0

    if drag.item[item] == nil then
        drag.item[item] = {}
        drag.item[item].drag_position = vector(0,0)
        drag.item[item].is_dragging = false
    end

    if drag.in_bounds(vector(x, y), vector(x + w, y + h)) and drag.in_bounds(vector(0, 0), vector(defines.screen_size.x, defines.screen_size.y)) then
        drag.hovered_something = true
        if common.is_button_down(0x01) and drag.item[item].is_dragging == false and (drag.current_drugging_item == nil or drag.current_drugging_item == item) then
            drag.item[item].is_dragging = true
            drag.current_drugging_item = item
            drag.item[item].drag_position = vector(x - ui.get_mouse_position().x, y - ui.get_mouse_position().y)
        end
    end

    if not drag.in_bounds(vector(0, 0), vector(defines.screen_size.x, defines.screen_size.y)) then
        drag.item[item].is_dragging = false
    end

    if not common.is_button_down(0x01) then
        drag.item[item].is_dragging = false
        drag.current_drugging_item = nil
    end

    if drag.item[item].is_dragging and ui.get_alpha() > 0 then
        ui_handler.refs["drag"][item .. "_pos_x"].ref:set(ui.get_mouse_position().x + drag.item[item].drag_position.x)
        ui_handler.refs["drag"][item .. "_pos_y"].ref:set(ui.get_mouse_position().y + drag.item[item].drag_position.y)
    end

    if alpha > 0 then
        render.rect_outline(vector(x, y), vector(x + w, y + h), color(255, 255, 255, ui.get_alpha() / 2 * alpha), 1, 4)
    end
end

events.mouse_input:set(function()
    if (drag.hovered_something or drag.current_drugging_item) and ui.get_alpha() > 0 then
        return false
    end
end)


skeet_indication.spectators_get = function()
    local spectators = {}

    local local_player, target = entity.get_local_player()

    if local_player ~= nil then
        if local_player.m_hObserverTarget then
            target = local_player.m_hObserverTarget
        else
            target = local_player
        end

        local players = entity.get_players(false, false)

        if players ~= nil then
            for k, player in pairs(players) do
                local obtarget = player.m_hObserverTarget

                if obtarget and obtarget == target then
                    table.insert(spectators, player)
                end
            end
        end
    end

    return spectators
end

skeet_indication.spectators = function()
    if not ui_handler.elements["interface"]["skeet_indication"] or not ui_handler.elements["interface"]["skeet_indication_spectators"] then
        return
    end

    local add_y = 5
    local spectators = skeet_indication.spectators_get()

    for _, spec in pairs(spectators) do
        local name = spec:get_name() 
        local text_size = render.measure_text(1, nil, name).x

        render.text(1, vector(defines.screen_size.x - text_size - 2, 2 + add_y), colors.white, nil, name)

        add_y = add_y + 17
    end
end

callbacks.register("render", "screen_indication", screen_indication.handle)
callbacks.register("render", "skeet_indication", skeet_indication.handle)
callbacks.register("render", "skeet_indication_spectators", skeet_indication.spectators)
callbacks.register("bomb_abortplant", "c4_info", c4_info.reset)
callbacks.register("bomb_defused", "c4_info", c4_info.reset)
callbacks.register("bomb_planted", "c4_info", c4_info.reset)
callbacks.register("round_prestart", "c4_info", c4_info.reset)
callbacks.register("bomb_beginplant", "c4_info", c4_info.bomb_beginplant)
